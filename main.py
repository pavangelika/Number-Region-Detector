import os
import time
import subprocess

from unicodedata import lookup
from var import DOWNLOAD_DIR, DB_PATH
from without_API import lookup_phone

def wait_for_csv_files(timeout=60):
    """–û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CSV —Ñ–∞–π–ª–æ–≤...")
    start_time = time.time()

    while time.time() - start_time < timeout:
        csv_files = [f for f in os.listdir(DOWNLOAD_DIR)
                     if f.endswith('.csv') and not f.startswith('.')]

        if csv_files:
            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã CSV —Ñ–∞–π–ª—ã: {', '.join(csv_files)}")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        temp_files = [f for f in os.listdir(DOWNLOAD_DIR)
                      if f.endswith(('.crdownload', '.part'))]
        if temp_files:
            print(f"üîÑ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞... ({len(temp_files)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫)")

        time.sleep(3)

    print("‚ùå –¢–∞–π–º–∞—É—Ç: CSV —Ñ–∞–π–ª—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å")
    return False


def wait_for_database_creation(timeout=30):
    """–û–∂–∏–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    start_time = time.time()

    while time.time() - start_time < timeout:
        if os.path.exists(DB_PATH):
            db_size = os.path.getsize(DB_PATH)
            if db_size > 1024:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ ({db_size // 1024} KB)")
                return True
            print(f"üîÑ –§–∞–π–ª –ë–î –µ—Å—Ç—å, –Ω–æ –µ—â–µ –ø—É—Å—Ç–æ–π ({db_size} bytes)")
        time.sleep(2)

    print("‚ùå –¢–∞–π–º–∞—É—Ç: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    return False


def run_script_with_checks(script_name, pre_check=None, post_check=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –¥–æ –∏ –ø–æ—Å–ª–µ"""
    if pre_check and not pre_check():
        return False

    try:
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {script_name}...")
        process = subprocess.Popen(
            ['python', script_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8'
        )

        # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())

        if process.returncode != 0:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ {script_name}:")
            print(process.stderr.read())
            return False

        if post_check and not post_check():
            return False

        return True

    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


def main():

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    # 2. –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    print("\n" + "=" * 50)
    print("üì± –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–ó–´ –ù–û–ú–ï–†–û–í")
    print("=" * 50)
    if not run_script_with_checks(
            "download_csv_cod_and_numbers.py",
            post_check=wait_for_csv_files
    ):
        print("\nüî¥ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV")
        return

    # 3. –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if not run_script_with_checks(
            "create_db.py",
            post_check=wait_for_database_creation
    ):
        print("\nüî¥ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î")
        return

    # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "=" * 50)
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

    csv_count = len([f for f in os.listdir(DOWNLOAD_DIR) if f.endswith('.csv')])
    db_exists = os.path.exists(DB_PATH)

    print(f"‚Ä¢ CSV —Ñ–∞–π–ª–æ–≤: {csv_count}")
    print(f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–Ω–∞–π–¥–µ–Ω–∞' if db_exists else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    if csv_count > 0 and db_exists:
        print(f"üìä –ü—É—Ç—å –∫ –±–∞–∑–µ: {DB_PATH}")
    else:
        print("\n‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    print("=" * 50)

    # 5. –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    while True:
        number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ 'stop/—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()

        if number.lower() in ('stop', '—Å—Ç–æ–ø'):
            break

        lookup_phone(number)


if __name__ == "__main__":
    main()